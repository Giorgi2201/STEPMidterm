using System;
using System.Collections.Generic;

namespace StudentControlSystem
{
    class Student
    {
        public string Name { get; set; }
        public int RollNumber { get; set; }
        public char Grade { get; set; }

        public Student(string name, int rollNumber, char grade)
        {
            Name = name;
            RollNumber = rollNumber;
            Grade = grade;
        }

        public override string ToString()
        {
            return $"Name: {Name}, Roll Number: {RollNumber}, Grade: {Grade}";
        }
    }

    class StudentManager
    {
        private List<Student> students = new List<Student>();

        public void AddStudent(string name, int rollNumber, char grade)
        {
            foreach (var student in students)
            {
                if (student.RollNumber == rollNumber)
                {
                    Console.WriteLine("A student with this roll number already exists.");
                    return;
                }
            }

            students.Add(new Student(name, rollNumber, grade));
            Console.WriteLine("Student added successfully!");
        }

        public void ShowAllStudents()
        {
            if (students.Count == 0)
            {
                Console.WriteLine("No students found.");
                return;
            }

            foreach (var student in students)
            {
                Console.WriteLine(student);
            }
        }

        public void FindStudentByRollNumber(int rollNumber)
        {
            foreach (var student in students)
            {
                if (student.RollNumber == rollNumber)
                {
                    Console.WriteLine("Student found: " + student);
                    return;
                }
            }
            Console.WriteLine("No student found with the given roll number.");
        }

        public void UpdateStudentGrade(int rollNumber, char newGrade)
        {
            foreach (var student in students)
            {
                if (student.RollNumber == rollNumber)
                {
                    student.Grade = newGrade;
                    Console.WriteLine("Student's grade updated successfully!");
                    return;
                }
            }
            Console.WriteLine("No student found with the given roll number.");
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            StudentManager manager = new StudentManager();
            while (true)
            {
                Console.WriteLine("\n--- Student Control System ---");
                Console.WriteLine("1. Add New Student");
                Console.WriteLine("2. See All Students");
                Console.WriteLine("3. Find Student by Roll Number");
                Console.WriteLine("4. Renew Student Marks");
                Console.WriteLine("5. Exit");
                Console.Write("Choose an option (1-5): ");

                if (!int.TryParse(Console.ReadLine(), out int choice) || choice < 1 || choice > 5)
                {
                    Console.WriteLine("Invalid input. Please enter a number between 1 and 5.");
                    continue;
                }

                if (choice == 5)
                {
                    Console.WriteLine("Exiting the program. Goodbye!");
                    break;
                }

                switch (choice)
                {
                    case 1:
                        Console.Write("Enter Student Name: ");
                        string name = Console.ReadLine();
                        while (string.IsNullOrWhiteSpace(name))
                        {
                            Console.WriteLine("Name cannot be empty. Enter a valid name:");
                            name = Console.ReadLine();
                        }

                        Console.Write("Enter Roll Number: ");
                        if (!int.TryParse(Console.ReadLine(), out int rollNumber) || rollNumber <= 0)
                        {
                            Console.WriteLine("Invalid roll number. It must be a positive integer.");
                            continue;
                        }

                        Console.Write("Enter Grade (A-F): ");
                        if (!char.TryParse(Console.ReadLine(), out char grade) || !"ABCDEF".Contains(char.ToUpper(grade)))
                        {
                            Console.WriteLine("Invalid grade. It must be a single character between A and F.");
                            continue;
                        }

                        manager.AddStudent(name, rollNumber, char.ToUpper(grade));
                        break;

                    case 2:
                        manager.ShowAllStudents();
                        break;

                    case 3:
                        Console.Write("Enter Roll Number to Search: ");
                        if (!int.TryParse(Console.ReadLine(), out rollNumber) || rollNumber <= 0)
                        {
                            Console.WriteLine("Invalid roll number. It must be a positive integer.");
                            continue;
                        }

                        manager.FindStudentByRollNumber(rollNumber);
                        break;

                    case 4:
                        Console.Write("Enter Roll Number to Update: ");
                        if (!int.TryParse(Console.ReadLine(), out rollNumber) || rollNumber <= 0)
                        {
                            Console.WriteLine("Invalid roll number. It must be a positive integer.");
                            continue;
                        }

                        Console.Write("Enter New Grade (A-F): ");
                        if (!char.TryParse(Console.ReadLine(), out char newGrade) || !"ABCDEF".Contains(char.ToUpper(newGrade)))
                        {
                            Console.WriteLine("Invalid grade. It must be a single character between A and F.");
                            continue;
                        }

                        manager.UpdateStudentGrade(rollNumber, char.ToUpper(newGrade));
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
        }
    }
}
